#include "PlayerShot.h"
#include "Globals.h"

const unsigned char spriteRight[] PROGMEM = { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x1, 0x1, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x00, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x1, 0x1, 0x1, 0x00, 0x1, 0x00, 0x1, 0x1, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, };

void PlayerShot::render(Vector2Int screenPos)
{
	if (screenPos.x < 0 || screenPos.x >= SCREEN_WIDTH)
	{
		shrinking = true;
	}

	arduboy.drawBitmap(screenPos.x-length, screenPos.y, (const uint8_t *)spriteRight, length, 1, WHITE);
}

void PlayerShot::fire(float xVelocity)
{
	length = 1;
	velocity.x = xVelocity;
	shrinking = false;
}

void PlayerShot::update(GameObject* pPrevSibling)
{
	MovingGameObject::update(pPrevSibling);

	if (!shrinking)
	{
		length += 2;
		if (length >= 64)
		{
			length = 64;
		}

		// Collision detection
	}
	else
	{
		if (length <= 2)
		{
			length = 0;
#ifdef _DEBUG
			Serial.println(F("Pooling shot"));
#endif
			((GameState*)(stateManager.getCurrentState()))->pool(this, pPrevSibling);
		}
		else
		{
			length -= 2;
		}
	}
}
